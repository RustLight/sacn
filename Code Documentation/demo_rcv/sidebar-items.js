initSidebarItems({"constant":[["ACTION_ANNOUNCE_DISCOVERED",""],["ACTION_ANNOUNCE_TERMINATION",""],["ACTION_FILE_OUT",""],["ACTION_HELP",""],["ACTION_IGNORE",""],["ACTION_LISTEN_UNIVERSE",""],["ACTION_PREVIEW",""],["ACTION_PRINT_DISCOVERED_SOURCES",""],["ACTION_PRINT_DISCOVERED_SOURCES_NO_TIMEOUT",""],["ACTION_QUIT",""],["ACTION_RECV","The string given by the user to perform each of the various options as described in get_usage_str below."],["ACTION_RECV_CONTINUOUS",""],["ACTION_SLEEP",""],["ACTION_STOP_LISTEN_UNIVERSE",""],["WRITE_TO_FILE_HEADERS","The headers used for the top of the file when the FILE_OUT action is used."]],"fn":[["create_values_str","Converts the given array of u8 values into a comma separated string. https://users.rust-lang.org/t/what-is-right-ways-to-concat-strings/3780/4 (09/04/2020)"],["display_help",""],["get_usage_str","Describes the various commands / command-line arguments available and what they do. Displayed to the user if they ask for help or enter an unrecognised input. Not a const as const with format! not supported in rust."],["handle_input","Handle a line of input on stdin to the program. Returns true if there is more input expected and false if not."],["main",""],["print_data",""],["print_discovered_sources",""],["print_recv",""],["write_to_file","Writes the given data to the given file (uses the given data_id as first column). Uses comma separated values."]],"mod":[["error","Import the error-chain handling into the module."]]});